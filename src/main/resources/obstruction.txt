test test1

    ObjectMapper objectMapper = new ObjectMapper();

        try {
            HashMap<String, ProductVersion> productVersionMap = objectMapper.readValue(jsonString, new TypeReference<HashMap<String, ProductVersion>>() {});

            // Now you have the JSON data as a HashMap
            for (String key : productVersionMap.keySet()) {
                ProductVersion product = productVersionMap.get(key);
                System.out.println(key + " => " + product.getName() + " (Version: " + product.getVersion() + ")");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        @Mapper
        public interface MyMapper {
            MyMapper INSTANCE = Mappers.getMapper(MyMapper.class);

            @Mapping(target = "formattedAmount", source = "amount")
            MyDto sourceToDto(MyEntity source);

            default String formatAmount(String amount) {
                try {
                    double value = Double.parseDouble(amount);
                    return String.format("%.2f", value);
                } catch (NumberFormatException e) {
                    // Handle the case where the "amount" field is not a valid double
                    return amount; // or another suitable default value
                }
            }
        }