test test1

    ObjectMapper objectMapper = new ObjectMapper();

        try {
            HashMap<String, ProductVersion> productVersionMap = objectMapper.readValue(jsonString, new TypeReference<HashMap<String, ProductVersion>>() {});

            // Now you have the JSON data as a HashMap
            for (String key : productVersionMap.keySet()) {
                ProductVersion product = productVersionMap.get(key);
                System.out.println(key + " => " + product.getName() + " (Version: " + product.getVersion() + ")");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        @Mapper
        public interface MyMapper {
            MyMapper INSTANCE = Mappers.getMapper(MyMapper.class);

            @Mapping(target = "formattedAmount", source = "amount")
            MyDto sourceToDto(MyEntity source);

            default String formatAmount(String amount) {
                try {
                    double value = Double.parseDouble(amount);
                    return String.format("%.2f", value);
                } catch (NumberFormatException e) {
                    // Handle the case where the "amount" field is not a valid double
                    return amount; // or another suitable default value
                }
            }
        }


        public class AmountFormatter implements MappingContext {

            private static final String AMOUNT_FIELD_NAME = "amount";

            @Override
            public String format(Object o, String s, MappingContext mappingContext) {
                Postings postings = (Postings) o;

                try {
                    Field amountField = postings.getClass().getDeclaredField(AMOUNT_FIELD_NAME);

                    if (amountField.getType() == String.class) {
                        BigDecimal amount = postings.getAmount();
                        NumberFormat formatter = NumberFormat.getCurrencyInstance();
                        String formattedAmount = formatter.format(amount);

                        amountField.setAccessible(true);
                        amountField.set(postings, formattedAmount);
                    }
                } catch (NoSuchFieldException | IllegalAccessException e) {
                    // Ignore if the amount field is not present or accessible.
                }

                return null;
            }
        }

        @Mapper(uses = AmountFormatter.class)
        public interface PostingsMapper {

            @Mappings({
                    @Mapping(source = "postings.amount", target = "formattedAmount")
            })
            PostingsDTO toDTO(Postings postings);
        }

        public BigDecimal getAmount(Object o) throws NoSuchFieldException, IllegalAccessException {
            Field amountField = o.getClass().getDeclaredField(AMOUNT_FIELD_NAME);
            amountField.setAccessible(true);
            return (BigDecimal) amountField.get(o);
        }

        public void setAmount(Object o, BigDecimal amount) throws NoSuchFieldException, IllegalAccessException {
            Field amountField = o.getClass().getDeclaredField(AMOUNT_FIELD_NAME);
            amountField.setAccessible(true);
            amountField.set(o, amount);
        }


             String amount = "10.1"; // Example amount string

                // Split the amount into the integer and decimal parts
                String[] parts = amount.split("\\.");

                if (parts.length == 2 && parts[1].length() == 1) {
                    // If there is exactly one digit after the decimal point, add a trailing zero
                    amount = amount + "0";
                } else if (parts.length == 1) {
                    // If there are no decimal places, add ".00"
                    amount = amount + ".00";
                }

                System.out.println(amount);

                @Configuration
                @EnableWebSecurity
                public class SecurityConfig extends WebSecurityConfigurerAdapter {

                  @Override
                  protected void configure(HttpSecurity http) throws Exception {
                    http.authorizeRequests()
                      .requestMatchers(EndpointRequest.toAnyEndpoint()).permitAll();
                  }

                }


                    private static OffsetDateTime convertTimestampToOffsetDateTime(long timestamp) {
                        // Convert the long timestamp to Instant
                        Instant instant = Instant.ofEpochMilli(timestamp);

                        // Specify the desired time zone offset (e.g., UTC)
                        ZoneOffset zoneOffset = ZoneOffset.UTC;

                        // Create OffsetDateTime from Instant and ZoneOffset
                        OffsetDateTime offsetDateTime = instant.atOffset(zoneOffset);

                        return offsetDateTime;
                    }
logging.level.io.lettuce.core=DEBUG
<!-- logback.xml -->
<configuration>
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <root level="debug">
        <appender-ref ref="STDOUT" />
    </root>
</configuration>



                    # Redis connection properties
                    spring.redis.host=your-redis-host
                    spring.redis.port=6379
                    spring.redis.password=your-redis-password
                    spring.redis.timeout=3000 # Timeout in milliseconds

                    # Lettuce-specific properties
                    spring.redis.lettuce.pool.max-active=8
                    spring.redis.lettuce.pool.max-idle=8
                    spring.redis.lettuce.pool.min-idle=0
                    spring.redis.lettuce.pool.max-wait= -1 # The maximum amount of time (in milliseconds) the pool will block before throwing an exception